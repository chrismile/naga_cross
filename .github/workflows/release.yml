name: Handle Release

#on:
#  push:
#    tags:
#      - "v*.*.*"
on:
  release:
    types: [created]

permissions:
    contents: write

jobs:
  generate:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets.
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            target_name: x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            target_name: aarch64-linux
          # WebAssembly targets.
          - os: ubuntu-latest
            target: wasm32-unknown-unknown # wasm32-unknown-emscripten?
            target_name: wasm32
          # Windows targets.
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            target_name: x86_64-windows
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            target_name: x86_64-windows-gnu
          # macOS targets.
          - os: macos-latest
            target: x86_64-apple-darwin
            target_name: x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            target_name: aarch64-macos

    name: "Create release-artifacts target ${{ matrix.target_name }}"
    runs-on: ${{ matrix.os }}

    env:
      artifact_name: ${{ github.event.repository.name }}-${{ github.event.release.tag_name }}-${{ matrix.target_name }}

    steps:
      - uses: actions/checkout@v2

      # Targets can be queried with "rustc --print target-list".
      - name: Install dependencies
        run: |
          cargo install cbindgen cargo-about
          rustup target add ${{ matrix.target }}

      - name: Build target
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ] && [ "${{ matrix.target_name }}" == "aarch64-linux" ]; then
              sudo apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross
              rustup toolchain install stable-aarch64-unknown-linux-gnu
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          fi
          cargo build --lib --release --target=${{ matrix.target }}

      - name: Copy files
        shell: bash
        run: |
          proj_name=${{ github.event.repository.name }}
          mkdir dist
          mkdir dist/docs
          mkdir dist/include
          mkdir dist/lib
          mkdir dist/lib/cmake
          mkdir dist/lib/cmake/${proj_name}
          cp LICENSE dist/docs/LICENSE-naga_cross.txt
          cargo about generate about.hbs > dist/docs/LICENSE-naga_cross-deps.html
          cp "CMake/${proj_name}Config.cmake" "dist/lib/cmake/${proj_name}/"
          cbindgen --config cbindgen.toml --crate ${proj_name} --output dist/include/${proj_name}.h
          if [ "${{ matrix.target_name }}" == "wasm32" ]; then
              cp "target/${{ matrix.target }}/release/lib${proj_name}.a" dist/lib/
              cp "target/${{ matrix.target }}/release/${proj_name}.wasm" dist/lib/
          elif [ "$RUNNER_OS" == "Linux" ]; then
              cp "target/${{ matrix.target }}/release/lib${proj_name}.a" dist/lib/
              cp "target/${{ matrix.target }}/release/lib${proj_name}.so" dist/lib/
          elif [ "$RUNNER_OS" == "Windows" ]; then
              mkdir dist/bin
              cp "target/${{ matrix.target }}/release/${proj_name}.dll" dist/bin/
              if [ "${{ matrix.target_name }}" == "x86_64-windows-gnu" ]; then
                  cp "target/${{ matrix.target }}/release/lib${proj_name}.a" dist/lib/
              else
                  cp "target/${{ matrix.target }}/release/${proj_name}.lib" dist/lib/
              fi
          elif [ "$RUNNER_OS" == "macOS" ]; then
              cp "target/${{ matrix.target }}/release/lib${proj_name}.a" dist/lib/
              cp "target/${{ matrix.target }}/release/lib${proj_name}.dylib" dist/lib/
          fi
          mv dist ${{ env.artifact_name }}

      #- name: Create archive (Unix)
      #  shell: bash
      #  run: |
      #    zip -r ${{ env.artifact_name }}.zip ${{ env.artifact_name }}
      - uses: vimtor/action-zip@v1.2
        with:
          files: ${{ env.artifact_name }}/
          dest: ${{ env.artifact_name }}.zip

      # Needs "Read and write permission" under "Workflow permissions" on https://github.com/chrismile/naga_cross/settings/actions.
      - name: Create release
        uses: softprops/action-gh-release@v2
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.artifact_name }}.zip
